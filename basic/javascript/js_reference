1.为什么学js
    html 定义网页内容
    css 定义网页布局
    javascript  定义网页行为
2.学习基础
    html和css基础
3.简介
    JavaScript 是轻量级脚本语言、可以插入HTML页面、可由所有的现代浏览器执行
    JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言
4.JS通常用法
    直接放在<script> </script>中
    单独存入xx.js文件，然后HTML中通过<script src="xx.js"></script>
    <script type="text/javascript></script> 其中type是可以忽略的，因为默认的type就是JavaScript
5.如何运行JS
    要让浏览器运行JavaScript，必须先有一个HTML页面，在HTML页面中引入JavaScript，然后，让浏览器加载该HTML页面，就可以执行JavaScript代码
6.浏览器中调试JS
    chrome -> view -> developer -> developer tools
7.基本语法
    分号，语句结束：语句以;结束
        关于结束的分号：JavaScript并不强制要求在每个语句的结尾加;，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上;
        推荐使用分号结束

    大括号，语句块：语句块用{ }

    注释，以//开头的行注释， 以/**/ 的块注释

    大小写：严格区分大小写

    Number 数字类型：不区分整数和浮点数，统一用Number表示
        123; // 整数123
        0.456; // 浮点数0.456
        1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
        -99; // 负数
        NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
        Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
        0xff00; // 二进制表示

    字符串：
        以单引号'或双引号"括起来的任意文本, 推荐使用单引号

        转义字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\

        多行字符串，用反引号 ` ... ` 表示

        字符串连接：用+号，如：
            var name = 'xiaoming';
            var age = 29;
            var message = 'hello ' + name + ' you age is: ' + age;
        ES6新增了一种模板字符串，来实现字符串连接, 它会自动替换字符串中的变量如：
            var message = 'hello  + ${name} +  you age is: + ${age}';

        字符串长度,length 属性，如：
            var message = 'hello world';
            console.log(message.length);


        字符的索引，从0开始。
        message[0]; // h
        message[10];// d
        message[11];// undefined 超出范围的索引不会报错，但一律返回undefined

        注意：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果

        字符串操作的一些方法，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：
            toUpperCase()把一个字符串全部变为大写
            toLowerCase()把一个字符串全部变为小写
            indexOf()会搜索指定字符串出现的位置,如：
                var message = 'hello world';
                message.indexOf('world');   // 6
                message.indexOf('World');   // 没有找到，返回-1， 严格区分大小写
            subString()返回指定索引区间的子串，如：
                var message = 'hello world';
                message.subString(0, 5);    // 从索引0开始到5（不包括5），返回'hello'
                message.subString(7);   // 从索引7开始到结束，返回'orld'


    布尔值：
        只有true、false两种值

    null 和 undefined:
        null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”
        null表示一个空的值，而undefined表示值未定义

    数组：
        可以包含任意数据类型，并通过索引来访问每个元素
        数组用[]表示，元素之间用,分隔
        var arr = [1, 2, 3.14, 'Hello', null, true];
        数组的元素可以通过索引来访问。请注意，索引的起始值为0

        通过length属性，获取数组长度, 如：
            arr.length; // 6

        通过索引可以修改数组的元素值，如：
            arr[1] = 99; // [1, 99, 3.14, 'Hello', null, true]

        注意数组的大小的变化：
            通过给length赋值，如：
                var arr = [1, 2, 3]
                arr.length = 6; // arr 变化为 [1, 2, 3, undefined, undefined, undefined]
                arr.length = 2; // arr 变化为 [1, 2]
            通过索引赋值，索引超过范围，会引起array大小的变化，如：
                var arr = [1, 2, 3]
                arr[5]= 'x';    // arr 变化为 [1, 2, 3, undefined, undefined, 'x']

            注意，编码时候，不建立直接修改数组的大小，访问索引确保不越界


        通过indexOf() 搜索指定元素的位置：
            var arr = [10, 20, '30', 'xyz'];
            arr.indexOf(10);    // 0
            arr.indexOf(30);    // 返回 -1 ，没有找到
            arr.indexOf('30');  // 返回2

        slice（） 切片函数，对应字符串的subString() ，截取数组的一部分，返回新的数组：
            var arr = ['a', 'b', 'c', 'd', 'e'];
            arr.slice(0, 3);    // ['a', 'b', 'c'], 不包括索引3
            arr.slice(3);   // 从索引3开始到结束， ['d', 'e']
            如果不传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个数组


        push() 向末尾添加若干元素
            var arr = [1, 2];
            arr.push('a', 'b'); // [1, 2, 'a', 'b']
            arr.pop();  // [1, 2, 'a']
        pop() 删除最后一个元素
        unshift() 往头部添加若干元素：
            var arr = [1, 2];
            arr.unshift('a', 'b');  // ['a', 'b', 1, 2]
        shfit() 删除第一个元素

        sort() 对数组进行排序，按照默认顺序排序

        数组的连接：concat() 把当前数组和另外一个数组连接起来，返回一个新的数组：
            var arr = ['a', 'b', 'c'];
            var added = arr.concat([1, 2, 3]); // ['a', 'b', 'c', 1, 2, 3];

        join() 把数组的每个元素用指定的字符串连接起来，然后返回连接后的字符串：
            var arr = ['a', 'b', 'c', 1, 2, 3];
            arr.join('-');  // 'a-b-c-1-2-3'
        多维数组：
            如果某个元素是一个数组，则形成多维数组如：
                var multiArr = [[1,2,3], [400, 500,600], '-'];
    对象：
        JavaScript的对象是一组由键-值组成的无序集合,如：
        var person = {
            name: 'Bob',
            age: 20,
            tags: ['js', 'web', 'mobile'],
            city: 'Beijing',
            hasCar: true,
            zipcode: null
        };

        JavaScript用一个{...}表示一个对象

        键值对以xxx: xxx形式申明，用,隔开 注意，最后一个键值对不需要在末尾加,


        JavaScript对象的键都是字符串类型，值可以是任意数据类型
        每个键称为对象的属性。用 对象变量.属性名 的方式获取属性：
            person.name; // 'Bob'
            person.zipcode; // null

            注意，属性名字，必须是一个有效的变量名如果属性名包含特殊字符，就必须用''括起来，访问的时候必须使用['xxx']的方式'：
            var xiaoming = {
                name:'xiaoming',
                'middle-school':'no.1 middle school'
            };
            xiaoming['middle-school'];  // 'no.1 middle school'
            xiaoming['name']; // 'xiaoming'
            xiaoming.name;  // 'xiaoming'

            xiaohong.name的写法更简洁, 推荐，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性


        对象是动态类型，可以给一个对象，添加或删除属性：
            var xiaoming = {
                name:'xiaoming'
             };

             xiaoming.age; // undefined
             xiaoming.age = 20; // 新增属性
             delete xiaoming.age;   // 删除属性
             delete xiaoming.age;   // 删除一个不存在的属性，不会报错

        如果判断一个属性是否存在，in操作：
            'name' in xiaoming; // true 属性的本质是字符串
            'age' in xiaoming;  // false
            注意通过in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到
            要判断一个属性是否是xiaoming自身拥有的，而不是继承的可以用hasOwnProperty()：
            xiaoming.hasOwenProperty('name');
    变量：
        申明一个变量用var语句，如：
        var a; // 声明一个变量,此时a的值为undefined
        var b = 1;// 声明一个变量，并赋值，此时b的值为1
        var c = null;   // 声明一个变量，并赋值，此时值为null

        可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，
        这既是"动态语言"

        动态语言：变量本身类型不固定
        静态语言：定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错

        变量作用域：
            如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量
            由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行
            JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量


        全局作用域:
            不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性
            'use strict'
            var course = "javascript";
            alert(course);  / javascript
            alert(window.course);   // javascript
            因此，直接访问全局变量course和访问window.course是完全一样的
            其实每次直接调用的alert()函数其实也是window的一个变量

            得出结论：
                JavaScript实际上只有一个全局作用域。
                任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。


        名字空间：
            全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突。
            为此，可以定义一个名字空间，许多著名的JavaScript库都是这么干的：jQuery，YUI 等， 如：

            // 唯一的全局变量MYAPP
            var MYAPP = {};

            // 其他变量
            MYAPP.name = 'myapp';
            MYAPP.version = 1.0;

            // 其他函数:
            MYAPP.foo = function () {
                return 'foo';
            };

        注意，因为js的变量作用域，除了全局就是函数内部，无法像 c \c++\等一样，我们在for循环等语句块中是无法定义具有局部作用域的变量。

            function foo(){
                // 变量提升
                for(var i = 0; i < 100; i++){
                }
                i += 100;   // 任然可以引用变量i
            }

            相当于下面代码

            function foo() {
                var i;

                for(i = 0; i < 100; i++){

                }

                i += 100;
            }


            ES6 引入let关键字，声明块级作用域变量：
                function foo() {
                    var sum = 0;
                    for(let i = 0;i < 100; i++){
                        sum += i;
                    }

                    i += 1; // 错误
                }

     常量：
        ES6 引入关键字const来定义常量：const与let都具有块级作用域。
        const PI = 3.14;
        PI = 3; // 某些浏览器不报错，但是赋值无效
        PI; // 3.14











    关于严格strict 模式：
        同一页面中，未通过var声明就被使用的变量，该变量就自动被申明为全局变量
        使用var申明的变量则不是全局变量,为了避免这个缺陷，推荐使用严格模式

        在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误

        开启严格模式：在JavaScript代码的第一行写上
        'use strict'


    条件判断：
        if () {} else { } 建议永远都要写上{}

        多行条件判断:
            if () {} else if() { } else { }

        注意if的条件判断语句是true或者false。如果不是怎么办？
            var s = '123';
            if(s.length) {

            }

            JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true，因此上述代码条件判断的结果是true

    循环：
        for 循环  通过初始条件、结束条件和递增条件来循环执行语句块

            var i;
            for(i = 1; i <= 100; i++){

            }

        for in 以把一个对象的所有属性依次循环出来：
            var obj = {
                name:'jack',
                age:20,
                city:'beijing;
             };

            for(var key in obj) {
                console.log(key);
             }

            过滤掉继承的属性：
             for(var key in obj) {
                if(obj.hasOwenProperty(key)){

                }
             }

            遍历数组，数组的每个元素的索引被视为对象的属性
                var arr = ['a', 'b', 'c'];
                for (var index in arr){
                    console.log(index); // '0', '1', '2'
                    console.log(arr[index]);    // 'a', 'b', 'b'
                }

    ES6 引入了新的数据类型Map, 键值对， 对象的键只能是字符串
    初始化Map需要一个二维数组，或者直接初始化一个空Map， 如：
        var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
        m.get('Michael'); // 95

        var m = new Map();  // 空map
        m.set('Adam', 67); // 添加新的key-value
        m.set('Bob', 59);
        m.has('Adam'); // 是否存在key 'Adam': true
        m.get('Adam'); // 67
        m.delete('Adam'); // 删除key 'Adam'
        m.get('Adam'); // undefined

        由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉

    Set ES6新增，一组key的集合，key不能重复，key可以是多种类型。
        var s1 = new Set(); // 空set
        var s2 = new Set([1, 2, 3]);    // 包含1， 2， 3
        add(key)方法可以添加元素到Set中
        通过delete(key)方法可以删除元素

     遍历MAP 和 Set 无法使用下标的方式遍历，为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型.
     iterable 类型的集合可以通过for of 循环来遍历：
     var a = ['A', 'B', 'C'];
     var s = new Set(['A', 'B', 'C']);
     var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
     for (var x of a) { // 遍历Array
         console.log(x);
     }
     for (var x of s) { // 遍历Set
         console.log(x);
     }
     for (var x of m) { // 遍历Map
         console.log(x[0] + '=' + x[1]);
     }


    区分for of 和 for in 的区别？
        for ... in循环由于历史遗留问题。更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。

        'use strict'
        var a = ['a', 'b', 'c'];

        a.forEach(function(element, index, array)
             // element: 指向当前元素的值
             // index: 指向当前索引
             // array: 指向Array对象本身
             console.log(element + ', index = ' + index);
        );

        forEach()方法是ES5.1标准引入的

        Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身

        var s = new Set(['A', 'B', 'C']);
        s.forEach(function (element, sameElement, set) {
            console.log(element);
        });


        Map的回调函数参数依次为value、key和map本身

        var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
        m.forEach(function (value, key, map) {
            console.log(value);
        });

        如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们
        var a = ['A', 'B', 'C'];
        a.forEach(function (element) {
            console.log(element);
        });

8.函数
    函数的定义：
    第一种方式：
        function abs(x) {
            if (x >= 0) {
                return x;
            } else {
                return -x;
            }
        }
        function指出这是一个函数定义
        abs是函数的名称
        (x)括号内列出函数的参数，多个参数以,分隔
        { ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句
        一旦执行到return时，函数就执行完毕，并将结果返回
        如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined

    JavaScript的函数也是一个对象，定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。

    第二种方式：
        var abs = function (x) {
            if (x >= 0) {
                return x;
            } else {
                return -x;
            }
        };
        function (x) { ... }是一个匿名函数，它没有函数名


    函数的调用：
        调用函数时，按顺序传入参数即可
            abs(10); // 返回10
            abs(-9); // 返回9

        JavaScript允许传入任意个参数而不影响调用，可以多，可以少，可以没有。
            abs(10, 'blablabla'); // 返回10
            abs(-9, 'haha', 'hehe', null); // 返回9
            abs();  // 此时x将会是undefined, 计算结果NaN

            arguments最常用于判断传入参数的个数.
            function foo(a, b, c) {
                if (arguments.length === 2) {
                    // 实际拿到的参数是a和b，c为undefined
                    c = b; // 把b赋给c
                    b = null; // b变为默认值
                }
                // ...
            }


    JS函数可以嵌套：
        function foo() {
            var x = 1;
            function bar() {
                var x = 'A';
                console.log('x in bar() = ' + x); // 'A'
            }
            console.log('x in foo() = ' + x); // 1
            bar();
        }

        foo();
        // 结果
        // x in foo() = 1
        // x in bar() = A

    JS 变量提升：
        JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部
        'use strict';

        function foo() {
            var x = 'Hello, ' + y;
            console.log(x);
            var y = 'Bob';
        }

        foo();
        // 结果
        // Hello, undefined
        // 提升了变量的声明，但是没有提升变量y的赋值,y为undefined
        相当于下面的代码：
        function foo() {
            var y; // 提升变量y的申明，此时y为undefined
            var x = 'Hello, ' + y;
            console.log(x);
            y = 'Bob';
        }

        我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量

        function foo() {
            var x = 1;
            var y = x + 1;
            var z;
            var i;

            for (i = 0; i < 100; i++){

            }

        }



    JS 方法
        在一个对象中绑定函数，称为这个对象的方法。
        var xiaoming = {
            name: 'xiaoming',
            birth:1990,
            age: function() {
                var y = new Date().getFullYear();
                return y - this.birth;
            }
        }

        xiaoming.age;   // function xiaoming.age()
        xiaoming.age(); //  28

        注意：在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量


    JS 高阶函数：
        一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
        function add(x,y ,f){
            return f(x) + f(y)
        }

        var x = add(-5, 6, Math.abs);
        console.log(x);
    JS 闭包：
    JS 箭头函数：
        ES6标准新增了一种新的函数：Arrow Function（箭头函数）

9. 标准对象
    在JS的世界里，一切都是对象。
    用typeof操作符获取对象的类型，它总是返回一个字符串
    typeof 123; // 'number'
    typeof NaN; // 'number'
    typeof 'str'; // 'string'
    typeof true; // 'boolean'
    typeof undefined; // 'undefined'
    typeof Math.abs; // 'function'
    typeof null; // 'object'
    typeof []; // 'object'
    typeof {}; // 'object'

    在JavaScript中，Date对象用来表示日期和时间
        var now = new Date();
        now.getFullYear();  // 2018



10. JS 面向对象编程
    JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程
    关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单




























